// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import http "net/http"
import mock "github.com/stretchr/testify/mock"
import tracing "github.com/applike/gosoline/pkg/tracing"

// Tracer is an autogenerated mock type for the Tracer type
type Tracer struct {
	mock.Mock
}

// HttpHandler provides a mock function with given fields: h
func (_m *Tracer) HttpHandler(h http.Handler) http.Handler {
	ret := _m.Called(h)

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func(http.Handler) http.Handler); ok {
		r0 = rf(h)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// StartSpan provides a mock function with given fields: name
func (_m *Tracer) StartSpan(name string) (context.Context, tracing.Span) {
	ret := _m.Called(name)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(string) context.Context); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	var r1 tracing.Span
	if rf, ok := ret.Get(1).(func(string) tracing.Span); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(tracing.Span)
		}
	}

	return r0, r1
}

// StartSpanFromContext provides a mock function with given fields: ctx, name
func (_m *Tracer) StartSpanFromContext(ctx context.Context, name string) (context.Context, tracing.Span) {
	ret := _m.Called(ctx, name)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	var r1 tracing.Span
	if rf, ok := ret.Get(1).(func(context.Context, string) tracing.Span); ok {
		r1 = rf(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(tracing.Span)
		}
	}

	return r0, r1
}

// StartSpanFromTraceAble provides a mock function with given fields: obj, name
func (_m *Tracer) StartSpanFromTraceAble(obj tracing.TraceAble, name string) (context.Context, tracing.Span) {
	ret := _m.Called(obj, name)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(tracing.TraceAble, string) context.Context); ok {
		r0 = rf(obj, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	var r1 tracing.Span
	if rf, ok := ret.Get(1).(func(tracing.TraceAble, string) tracing.Span); ok {
		r1 = rf(obj, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(tracing.Span)
		}
	}

	return r0, r1
}

// StartSubSpan provides a mock function with given fields: ctx, name
func (_m *Tracer) StartSubSpan(ctx context.Context, name string) (context.Context, tracing.Span) {
	ret := _m.Called(ctx, name)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	var r1 tracing.Span
	if rf, ok := ret.Get(1).(func(context.Context, string) tracing.Span); ok {
		r1 = rf(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(tracing.Span)
		}
	}

	return r0, r1
}
