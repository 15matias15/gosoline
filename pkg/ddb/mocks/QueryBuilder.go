// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import ddb "github.com/applike/gosoline/pkg/ddb"
import djoemo "github.com/adjoeio/djoemo"
import mock "github.com/stretchr/testify/mock"

// QueryBuilder is an autogenerated mock type for the QueryBuilder type
type QueryBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *QueryBuilder) Build() djoemo.QueryInterface {
	ret := _m.Called()

	var r0 djoemo.QueryInterface
	if rf, ok := ret.Get(0).(func() djoemo.QueryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(djoemo.QueryInterface)
		}
	}

	return r0
}

// Index provides a mock function with given fields:
func (_m *QueryBuilder) Index() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// WithHash provides a mock function with given fields: key, value
func (_m *QueryBuilder) WithHash(key string, value interface{}) ddb.QueryBuilder {
	ret := _m.Called(key, value)

	var r0 ddb.QueryBuilder
	if rf, ok := ret.Get(0).(func(string, interface{}) ddb.QueryBuilder); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.QueryBuilder)
		}
	}

	return r0
}

// WithIndex provides a mock function with given fields: name
func (_m *QueryBuilder) WithIndex(name string) ddb.QueryBuilder {
	ret := _m.Called(name)

	var r0 ddb.QueryBuilder
	if rf, ok := ret.Get(0).(func(string) ddb.QueryBuilder); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.QueryBuilder)
		}
	}

	return r0
}

// WithRange provides a mock function with given fields: key, op, value
func (_m *QueryBuilder) WithRange(key string, op djoemo.Operator, value interface{}) ddb.QueryBuilder {
	ret := _m.Called(key, op, value)

	var r0 ddb.QueryBuilder
	if rf, ok := ret.Get(0).(func(string, djoemo.Operator, interface{}) ddb.QueryBuilder); ok {
		r0 = rf(key, op, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.QueryBuilder)
		}
	}

	return r0
}
