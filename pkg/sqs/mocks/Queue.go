// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"

import sqs "github.com/aws/aws-sdk-go/service/sqs"

// Queue is an autogenerated mock type for the Queue type
type Queue struct {
	mock.Mock
}

// DeleteMessage provides a mock function with given fields: msg
func (_m *Queue) DeleteMessage(msg *sqs.Message) error {
	ret := _m.Called(msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sqs.Message) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetArn provides a mock function with given fields:
func (_m *Queue) GetArn() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *Queue) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUrl provides a mock function with given fields:
func (_m *Queue) GetUrl() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Receive provides a mock function with given fields: waitTime
func (_m *Queue) Receive(waitTime int64) ([]*sqs.Message, error) {
	ret := _m.Called(waitTime)

	var r0 []*sqs.Message
	if rf, ok := ret.Get(0).(func(int64) []*sqs.Message); ok {
		r0 = rf(waitTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sqs.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(waitTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: ctx, value
func (_m *Queue) Send(ctx context.Context, value string) error {
	ret := _m.Called(ctx, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendBatch provides a mock function with given fields: ctx, values
func (_m *Queue) SendBatch(ctx context.Context, values []string) error {
	ret := _m.Called(ctx, values)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
